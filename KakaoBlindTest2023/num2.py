'''
1열로 나열된 n개의 집에 택배를 배달함
배달할 물건은 모두 같은 크기의 박스에 담아 배달함

배달을 다니면서 빈 택배 상자를 수거하려고 한다.

배달할 택배들은 모두 상자에 담겨 창고에 보관중

i번째 집은 창고로부터 i만큼 떨어져 있다.
또한 i번째 집은 j번 째 집과 j - i 만큼 떨어짐

1 <= i <= j <= n

트럭에는 재활용 택배 상자를 cap개 실을 수 있다.

트럭은 창고에서 출발해 각집에 배달하고 수거까지하고 창고로 돌아옴
각 집마다 배달할 재활용 택배 상자의 개수와 수거할 빈 택배 상자의 개수를 알때 트럭하나로 모든 배달과 수거를 마치고 물류창고까지 돌아올 수 있는 최소 이동거리를 구하자.

0 <= 각 집의 배달할 물건의 개수 <= 50
0 <= 각 집에서 수거할 물건의 개수 <= 50
1 <= 집의 개수 <= 100,000
1 <= 택배 용량 <= 50

모든 물건의 개수가 50개이고
집이 100,000이고
택배 용량이 1일 경우 가 최악의 경우이다.
O(nlogn) 설계해야함.

그리디 아닐까?
가장 먼 것부터 처리함.
'''


def solution(cap, n, deliveries, pickups):
    answer = -1
    return answer


# 한번 가는 함수
def go(arr, k, idx):
    plus = 0
    # 한번만에 idx번의 택배 배송을 모두 할 수 있을 경우
    if arr[idx] // k == 0 or arr[idx] // k == 1 and arr[idx] % k == 0:
        k -= arr[idx]
        idx -= 1
    # 한번만에 idx번 집에 택배 배송을 할 수 없는 경우


